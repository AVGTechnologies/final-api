module FinalAPI
  module DDTF
    RESULT_SEVERITY = {
      passed: 0,
      pending: 1,
      failed: 2
    }

    def ddtf_test
      @ddtf_test ||= {
        id: id,
        name: config_vars_hash["NAME"],
        description: config_vars_hash["DESCRIPTION"],
        # TODO: I don't think this is equivalent
        queue_name: matrix.map(&:queue).uniq.join(', '),
        branch: branch,
        parts: ddtf_parts,
        status: state,
        email: owner.email,
        started: started_at,
        enqueued_by: owner.name,
        started_by: owner.name,
        stopped: state == :cancelled ? finished_at : nil,
        checkpoints: config_vars_hash["CHECKPOINTS"],
        build_signal: config_vars_hash["BUILD_SIGNAL"],
        scenario_script: config_vars_hash["SCENARIO_SCRIPT"],
        runtimeConfig: ddtf_runtimeConfig
      }
    end

    def ddtf_parts
      matrix_by_dimension('PART').map do |part_name, jobs|
        part = {
          name: part_name,
          machines: [],
          testCases: []
        }
        tc_results = []
        jobs.each do |job|
          current_machine = job.config_env_hash["MACHINE"]
          part[:machines] << current_machine
          tc_results << job.test_case_results
        end

        grouped_tc_results = tc_results.group_by { |tc| tc.test_case }
        part[:testCases] = grouped_tc_results.inject([]) do |test_cases, (tc, tc_results)|
          all_steps = TestStepResult.where('test_step_results.test_case_result_id IN (?)', tc_results).group('test_step_results.test_step_id').having('max(id)')

          test_case = {
            description: tc.description,
            result: 0
          }
          tc_results.each do |tc_result|
            tc[:result] = test_result_max(tc[:result], tc_result)
          end

          test_cases << test_case
        end
        part
      end
    end

    def ddtf_runtimeConfig
      config_vars_hash.reduce([]) do |arr, (key, value)|
        arr << { definition: key.downcase.camelcase, value: value }
      end
    end

    private
    def test_result_max(a_status, b_status)
      [
        RESULT_SEVERITY[a_status],
        RESULT_SEVERITY[b_status]
      ].max
    end

  end
end
